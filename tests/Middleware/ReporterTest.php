<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Dispatch\Middleware;

use Psr\Http\Server\RequestHandlerInterface;
use Psr\Log\LogLevel;

/**
 * Generated by hand
 */
class ReporterTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers \Caridea\Dispatch\Middleware\Reporter
     * @expectedException \RuntimeException
     * @expectedExceptionMessage foobar
     */
    public function testBasic()
    {
        $logger = $this->createMock(\Psr\Log\LoggerInterface::class);
        $logger->expects($this->once())->method('log')->willReturnCallback(function ($a, $b, $c) {
            $this->assertSame(\Psr\Log\LogLevel::ERROR, $a);
            $this->assertSame('foobar', $b);
            $this->assertInstanceOf(\RuntimeException::class, $c['exception']);
        });
        $levels = [];
        $reporter = new Reporter($logger, $levels);
        $request = new \Zend\Diactoros\ServerRequest();
        $response = new \Zend\Diactoros\Response();
        $handler = $this->createMock(RequestHandlerInterface::class);
        $handler->expects($this->once())->method('handle')->willThrowException(new \RuntimeException("foobar"));
        $reporter->process($request, $handler);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dispatch\Middleware\Reporter
     * @expectedException \RuntimeException
     * @expectedExceptionMessage foobar
     */
    public function testBasic2()
    {
        $logger = $this->createMock(\Psr\Log\LoggerInterface::class);
        $logger->expects($this->once())->method('log')->willReturnCallback(function ($a, $b, $c) {
            $this->assertSame(\Psr\Log\LogLevel::NOTICE, $a);
            $this->assertSame('foobar', $b);
            $this->assertInstanceOf(\RuntimeException::class, $c['exception']);
        });
        $levels = [
            \RuntimeException::class => LogLevel::NOTICE,
        ];
        $reporter = new Reporter($logger, $levels);
        $request = new \Zend\Diactoros\ServerRequest();
        $response = new \Zend\Diactoros\Response();
        $handler = $this->createMock(RequestHandlerInterface::class);
        $handler->expects($this->once())->method('handle')->willThrowException(new \RuntimeException("foobar"));
        $reporter->process($request, $handler);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dispatch\Middleware\Reporter
     * @expectedException \RuntimeException
     * @expectedExceptionMessage foobar
     */
    public function testCatchLoggerException()
    {
        $logger = $this->createMock(\Psr\Log\LoggerInterface::class);
        $logger->expects($this->once())->method('log')->willReturnCallback(function ($a, $b, $c) {
            $this->assertSame(\Psr\Log\LogLevel::NOTICE, $a);
            $this->assertSame('foobar', $b);
            $this->assertInstanceOf(\RuntimeException::class, $c['exception']);
            throw new \LogicException('Problem');
        });
        $levels = [
            \RuntimeException::class => LogLevel::NOTICE,
        ];
        $reporter = new Reporter($logger, $levels);
        $request = new \Zend\Diactoros\ServerRequest();
        $response = new \Zend\Diactoros\Response();
        $handler = $this->createMock(RequestHandlerInterface::class);
        $handler->expects($this->once())->method('handle')->willThrowException(new \RuntimeException("foobar"));
        $reporter->process($request, $handler);
        $this->verifyMockObjects();
    }
}
